# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cosyvoice_pb2 as cosyvoice__pb2


class CosyVoiceServiceStub(object):
    """========== Service 定义 ==========
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NormalizeText = channel.unary_unary(
                '/cosyvoice.CosyVoiceService/NormalizeText',
                request_serializer=cosyvoice__pb2.NormalizeTextRequest.SerializeToString,
                response_deserializer=cosyvoice__pb2.NormalizeTextResponse.FromString,
                )
        self.ExtractSpeakerFeatures = channel.unary_unary(
                '/cosyvoice.CosyVoiceService/ExtractSpeakerFeatures',
                request_serializer=cosyvoice__pb2.ExtractSpeakerFeaturesRequest.SerializeToString,
                response_deserializer=cosyvoice__pb2.ExtractSpeakerFeaturesResponse.FromString,
                )
        self.GenerateTTSTokens = channel.unary_unary(
                '/cosyvoice.CosyVoiceService/GenerateTTSTokens',
                request_serializer=cosyvoice__pb2.GenerateTTSTokensRequest.SerializeToString,
                response_deserializer=cosyvoice__pb2.GenerateTTSTokensResponse.FromString,
                )
        self.Token2Wav = channel.unary_unary(
                '/cosyvoice.CosyVoiceService/Token2Wav',
                request_serializer=cosyvoice__pb2.Token2WavRequest.SerializeToString,
                response_deserializer=cosyvoice__pb2.Token2WavResponse.FromString,
                )
        self.Cleanup = channel.unary_unary(
                '/cosyvoice.CosyVoiceService/Cleanup',
                request_serializer=cosyvoice__pb2.CleanupRequest.SerializeToString,
                response_deserializer=cosyvoice__pb2.CleanupResponse.FromString,
                )


class CosyVoiceServiceServicer(object):
    """========== Service 定义 ==========
    """

    def NormalizeText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractSpeakerFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateTTSTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Token2Wav(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CosyVoiceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NormalizeText': grpc.unary_unary_rpc_method_handler(
                    servicer.NormalizeText,
                    request_deserializer=cosyvoice__pb2.NormalizeTextRequest.FromString,
                    response_serializer=cosyvoice__pb2.NormalizeTextResponse.SerializeToString,
            ),
            'ExtractSpeakerFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractSpeakerFeatures,
                    request_deserializer=cosyvoice__pb2.ExtractSpeakerFeaturesRequest.FromString,
                    response_serializer=cosyvoice__pb2.ExtractSpeakerFeaturesResponse.SerializeToString,
            ),
            'GenerateTTSTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateTTSTokens,
                    request_deserializer=cosyvoice__pb2.GenerateTTSTokensRequest.FromString,
                    response_serializer=cosyvoice__pb2.GenerateTTSTokensResponse.SerializeToString,
            ),
            'Token2Wav': grpc.unary_unary_rpc_method_handler(
                    servicer.Token2Wav,
                    request_deserializer=cosyvoice__pb2.Token2WavRequest.FromString,
                    response_serializer=cosyvoice__pb2.Token2WavResponse.SerializeToString,
            ),
            'Cleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.Cleanup,
                    request_deserializer=cosyvoice__pb2.CleanupRequest.FromString,
                    response_serializer=cosyvoice__pb2.CleanupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosyvoice.CosyVoiceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CosyVoiceService(object):
    """========== Service 定义 ==========
    """

    @staticmethod
    def NormalizeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosyvoice.CosyVoiceService/NormalizeText',
            cosyvoice__pb2.NormalizeTextRequest.SerializeToString,
            cosyvoice__pb2.NormalizeTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExtractSpeakerFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosyvoice.CosyVoiceService/ExtractSpeakerFeatures',
            cosyvoice__pb2.ExtractSpeakerFeaturesRequest.SerializeToString,
            cosyvoice__pb2.ExtractSpeakerFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateTTSTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosyvoice.CosyVoiceService/GenerateTTSTokens',
            cosyvoice__pb2.GenerateTTSTokensRequest.SerializeToString,
            cosyvoice__pb2.GenerateTTSTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Token2Wav(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosyvoice.CosyVoiceService/Token2Wav',
            cosyvoice__pb2.Token2WavRequest.SerializeToString,
            cosyvoice__pb2.Token2WavResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosyvoice.CosyVoiceService/Cleanup',
            cosyvoice__pb2.CleanupRequest.SerializeToString,
            cosyvoice__pb2.CleanupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
