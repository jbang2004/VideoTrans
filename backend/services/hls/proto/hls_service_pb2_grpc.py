# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
import grpc

from . import hls_service_pb2 as hls__service__pb2


class HLSServiceStub(object):
    """HLS服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitTask = channel.unary_unary(
                '/hls.HLSService/InitTask',
                request_serializer=hls__service__pb2.InitTaskRequest.SerializeToString,
                response_deserializer=hls__service__pb2.InitTaskResponse.FromString,
                )
        self.AddSegment = channel.unary_unary(
                '/hls.HLSService/AddSegment',
                request_serializer=hls__service__pb2.AddSegmentRequest.SerializeToString,
                response_deserializer=hls__service__pb2.AddSegmentResponse.FromString,
                )
        self.FinalizeTask = channel.unary_unary(
                '/hls.HLSService/FinalizeTask',
                request_serializer=hls__service__pb2.FinalizeTaskRequest.SerializeToString,
                response_deserializer=hls__service__pb2.FinalizeTaskResponse.FromString,
                )
        self.CleanupTask = channel.unary_unary(
                '/hls.HLSService/CleanupTask',
                request_serializer=hls__service__pb2.CleanupTaskRequest.SerializeToString,
                response_deserializer=hls__service__pb2.CleanupTaskResponse.FromString,
                )


class HLSServiceServicer(object):
    """HLS服务定义
    """

    def InitTask(self, request, context):
        """初始化任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSegment(self, request, context):
        """添加视频片段
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeTask(self, request, context):
        """完成任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanupTask(self, request, context):
        """清理任务资源
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HLSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.InitTask,
                    request_deserializer=hls__service__pb2.InitTaskRequest.FromString,
                    response_serializer=hls__service__pb2.InitTaskResponse.SerializeToString,
            ),
            'AddSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSegment,
                    request_deserializer=hls__service__pb2.AddSegmentRequest.FromString,
                    response_serializer=hls__service__pb2.AddSegmentResponse.SerializeToString,
            ),
            'FinalizeTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeTask,
                    request_deserializer=hls__service__pb2.FinalizeTaskRequest.FromString,
                    response_serializer=hls__service__pb2.FinalizeTaskResponse.SerializeToString,
            ),
            'CleanupTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanupTask,
                    request_deserializer=hls__service__pb2.CleanupTaskRequest.FromString,
                    response_serializer=hls__service__pb2.CleanupTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hls.HLSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HLSService(object):
    """HLS服务定义
    """

    @staticmethod
    def InitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hls.HLSService/InitTask',
            hls__service__pb2.InitTaskRequest.SerializeToString,
            hls__service__pb2.InitTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hls.HLSService/AddSegment',
            hls__service__pb2.AddSegmentRequest.SerializeToString,
            hls__service__pb2.AddSegmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hls.HLSService/FinalizeTask',
            hls__service__pb2.FinalizeTaskRequest.SerializeToString,
            hls__service__pb2.FinalizeTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanupTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hls.HLSService/CleanupTask',
            hls__service__pb2.CleanupTaskRequest.SerializeToString,
            hls__service__pb2.CleanupTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
